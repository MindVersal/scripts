#cloud-config
ssh_authorized_keys:
 - %PUB_KEY%
write-files:
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: %K8S_IMAGE%
          command:
          - /hyperkube
          - proxy
          - --master=https://%MASTER_HOST%
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: "etc-kube-ssl"
              readOnly: true
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig.yaml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/kubernetes/ssl"
hostname: %HOSTNAME%
coreos:
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    # specify the initial size of your cluster with ?size=X
    discovery: %DISCOVERY%
    advertise-client-urls: http://%H:2379,http://%H:4001
    initial-advertise-peer-urls: http://%H:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://%H:2380
#  fleet:
#    metadata: "role=master"
#  fleet:
#    metadata: "role=node"
  units:
    - name: tmp-hostpath_pv.mount
      command: %K8S_HOSTPATH_PROVISIONER_MOUNT_POINT%
      content: |
        [Mount]
        What=/data/k8s
        Where=/tmp/hostpath_pv
        Type=none
        Options=bind
#    - name: download-flexvolume-plugin.service
#      command: start
#      content: |
#        [Unit]
#        Description=Download HostPath FlexVolume plugin
#        Requires=network-online.target
#        After=network-online.target
#        [Service]
#        ExecStartPre=-/usr/bin/mkdir -p /opt/bin/kubelet-plugins/volume/exec/my~hostpath
#        ExecStart=/usr/bin/curl -s -L -o /opt/bin/kubelet-plugins/volume/exec/my~hostpath/hostpath -z /opt/bin/kubelet-plugins/volume/exec/my~hostpath/hostpath https://github.com/kayrus/scripts/raw/master/hostpath
#        ExecStartPost=/usr/bin/chmod +x /opt/bin/kubelet-plugins/volume/exec/my~hostpath/hostpath
#        RemainAfterExit=yes
#        Type=oneshot
    - name: systemd-networkd.service
      command: restart
    - name: etcd2.service
      command: start
#    - name: fleet.service
#      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"%POD_NETWORK%", "Backend": {"Type": "%FLANNEL_TYPE%"}}'
    - name: docker.service
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: kubernetes-download@.service
      content: |
        [Unit]
        Description=Download Kubernetes %i binary
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStart=/usr/bin/curl -s -L -o /opt/bin/%i -z /opt/bin/%i https://storage.googleapis.com/kubernetes-release/release/%K8S_RELEASE%/bin/linux/amd64/%i
        ExecStartPost=/usr/bin/chmod +x /opt/bin/%i
        RemainAfterExit=yes
        Type=oneshot
    - name: setup-kubelet-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Kubelet Environment
        Requires=etcd2.service
        After=etcd2.service
        ConditionFileNotEmpty=!/etc/kubernetes/worker-kubeconfig.yaml
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes
        ExecStart=/usr/bin/bash -c "while true; do etcdctl get /kubeconfig > /etc/kubernetes/worker-kubeconfig.yaml && [ -s /etc/kubernetes/worker-kubeconfig.yaml ] && exit 0; sleep 1; done"
        ExecStartPost=/usr/bin/chmod 600 /etc/kubernetes/worker-kubeconfig.yaml
        RemainAfterExit=yes
        Type=oneshot
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service setup-kubelet-environment.service kubernetes-download@kubelet.service
        After=docker.service setup-kubelet-environment.service kubernetes-download@kubelet.service
        [Service]
        ExecStart=/opt/bin/kubelet \
          --api_servers=https://%MASTER_HOST% \
          --register-node=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=%H \
          --cluster_dns=%DNS_SERVICE_IP% \
          --cluster_domain=%K8S_DOMAIN% \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --volume-plugin-dir=/opt/bin/kubelet-plugins/volume/exec/ \
          --cadvisor-port=0
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
  update:
    reboot-strategy: off
